generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(uuid())
  userName  String
  email     String      @unique
  password  String
  role      UserRole    @default(USER) // Поле для роли
  avatar    String? // Поле для аватара (можно быть пустым)
  createAt  DateTime    @default(now())
  updateAt  DateTime    @updatedAt
  tasks     Task[]      @relation("TaskAssignment") // Связь с задачами
  BoardUser BoardUser[]
  Board     Board[]
}

model Board {
  id        String      @id @default(uuid())
  name      String      @unique
  createAt  DateTime    @default(now())
  updateAt  DateTime    @updatedAt
  columns   Columns[]
  BoardUser BoardUser[]
  userId    String // ID создателя доски
  user      User        @relation(fields: [userId], references: [id])
}

model BoardUser {
  id      String        @id @default(uuid())
  boardId String
  userId  String
  role    BoardUserRole
  board   Board         @relation(fields: [boardId], references: [id], onDelete: Cascade)
  user    User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([boardId, userId]) // Обеспечиваем уникальность связи
}

model Columns {
  id       String   @id @default(uuid())
  boardId  String
  name     String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  board    Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  task     Task[]
}

model Task {
  id            String    @id @default(uuid())
  columnId      String
  position      Int
  description   String
  image         String
  color         String
  priority      Priority  @default(MEDIUM) // Добавлено поле для приоритета
  dueDate       DateTime? // Добавлено поле для срока выполнения
  createAt      DateTime  @default(now())
  updateAt      DateTime  @updatedAt
  title         String
  subTask       SubTask[]
  assignedUsers User[]    @relation("TaskAssignment") // Связь с пользователями
  columName     Columns   @relation(fields: [columnId], references: [id], onDelete: Cascade)
}

model SubTask {
  id       String        @id @default(uuid())
  title    String
  taskId   String
  position Int?
  status   SubTaskStatus @default(INCOMPLETE)
  task     Task          @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([taskId, position])
}

enum SubTaskStatus {
  COMPLETE
  INCOMPLETE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum UserRole {
  ADMIN
  USER
}

enum BoardUserRole {
  CREATOR // Создатель доски
  MEMBER // Участник доски
}
