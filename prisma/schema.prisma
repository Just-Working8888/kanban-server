generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  userName String
  email    String
}

model Board {
  id       String    @id @default(uuid())
  name     String    @unique
  createAt DateTime  @default(now())
  updateAt DateTime  @updatedAt
  columns  Columns[]
}

model Columns {
  id       String   @id @default(uuid())
  boardId  String
  name     String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  board    Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  task     Task[]
}

model Task {
  id          String    @id @default(uuid())
  columnId    String
  position    Int
  description String
  color       String
  priority    Priority  @default(MEDIUM) // Добавлено поле для приоритета
  dueDate     DateTime? // Добавлено поле для срока выполнения
  createAt    DateTime  @default(now())
  updateAt    DateTime  @updatedAt
  title       String
  subTask     SubTask[]
  columName   Columns   @relation(fields: [columnId], references: [id], onDelete: Cascade)
}

model SubTask {
  id       String        @id @default(uuid())
  title    String
  taskId   String
  position Int?
  status   SubTaskStatus @default(INCOMPLETE)
  task     Task          @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([taskId, position])
}

enum SubTaskStatus {
  COMPLETE
  INCOMPLETE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}
